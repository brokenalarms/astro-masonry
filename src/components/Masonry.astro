---
interface Props {
  breakpointCols?: number | Record<number | "default", number>;
  class?: string;
  columnClass?: string;
  // All other props are passed through as Masonry.js options
  [key: string]: any;
}

const {
  breakpointCols = 2,
  class: className = "astro-masonry-grid",
  columnClass = "astro-masonry-grid_column",
  ...masonryOptions
} = Astro.props;

const breakpointColsString =
  typeof breakpointCols === "object"
    ? JSON.stringify(breakpointCols)
    : breakpointCols.toString();

// Convert all masonry options to data attributes for passing to JS
const masonryDataAttributes: Record<string, string> = {};
for (const [key, value] of Object.entries(masonryOptions)) {
  if (value !== undefined && value !== null) {
    // Convert camelCase to kebab-case for data attributes
    const dataKey = key.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);
    masonryDataAttributes[`data-masonry-${dataKey}`] =
      typeof value === 'object' ? JSON.stringify(value) : String(value);
  }
}
---

<style is:global>
  [data-masonry-container] {
    display: flex;
    align-items: flex-start;
  }

  [data-masonry-container] > * {
    visibility: hidden;
  }

  [data-masonry-container].initialized > * {
    visibility: visible;
  }

  [data-masonry-container]:not(.initialized) {
    flex-wrap: wrap;
  }

  [data-masonry-container]:not(.initialized) > * {
    width: 25%;
  }

  .astro-masonry-grid {
    display: flex;
    width: auto;
  }
</style>

<div
  class={className}
  data-breakpoint-cols={breakpointColsString}
  data-masonry-container
  data-column-class={columnClass}
  {...masonryDataAttributes}
>
  <slot />
</div>

<script>
  import { initializeMasonry, throttle } from "./masonry.js";

  let initialized = false;

  const initMasonry = () => {
    console.log("Initializing masonry.");

    const masonryContainer = document.querySelector("[data-masonry-container]");
    if (!masonryContainer) {
      console.warn("Masonry container not found.");
      return;
    }

    if (!initialized) {
      initializeMasonry();
      initialized = true;
    } else {
      const throttledInitialize = throttle(initializeMasonry, 200);
      throttledInitialize();
    }
  };

  const hasAstroViewTransitions = () => {
    if (typeof document === "undefined") return false; // Server side render check.
    const metaTag = document.querySelector(
      'meta[name="astro-view-transitions-enabled"]'
    );
    return metaTag && metaTag.getAttribute("content") === "true";
  };

  if (hasAstroViewTransitions()) {
    document.addEventListener("astro:page-load", initMasonry);
  } else {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initMasonry);
    } else {
      initMasonry();
    }
  }
</script>
